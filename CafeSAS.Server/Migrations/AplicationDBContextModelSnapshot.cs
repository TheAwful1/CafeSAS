// <auto-generated />
using System;
using CafeSAS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeSAS.Server.Migrations
{
    [DbContext(typeof(AplicationDBContext))]
    partial class AplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Admin", b =>
                {
                    b.Property<Guid>("ID_Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ID_Admin");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Caja", b =>
                {
                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Permiso")
                        .HasColumnType("bit");

                    b.Property<Guid>("TiendaID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TiendaID_Tienda");

                    b.ToTable("caja");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Categorias", b =>
                {
                    b.Property<Guid>("ID_Categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Categoria");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Detalle_Venta", b =>
                {
                    b.Property<Guid>("ID_DetalleVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("ID_Producto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Venta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoID_Producto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("VentasID_Venta")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_DetalleVenta");

                    b.HasIndex("ProductoID_Producto");

                    b.HasIndex("VentasID_Venta");

                    b.ToTable("detalle_Venta");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Empleado", b =>
                {
                    b.Property<Guid>("ID_Empleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<DateTime>("Hiredate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salario")
                        .HasColumnType("int");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<Guid?>("TiendaID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Empleado");

                    b.HasIndex("TiendaID_Tienda");

                    b.ToTable("empleado");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Inventario", b =>
                {
                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Permiso")
                        .HasColumnType("bit");

                    b.Property<Guid>("TiendaID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TiendaID_Tienda");

                    b.ToTable("inventario");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Menu", b =>
                {
                    b.Property<Guid>("ID_Menu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriasID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Menu");

                    b.HasIndex("CategoriasID_Categoria");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Produccion", b =>
                {
                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Permiso")
                        .HasColumnType("bit");

                    b.Property<Guid>("TiendaID_Tienda")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TiendaID_Tienda");

                    b.ToTable("produccion");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Producto", b =>
                {
                    b.Property<Guid>("ID_Producto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CantidadTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoriasID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrecioCompra")
                        .HasColumnType("int");

                    b.Property<int?>("PrecioCompraUnidad")
                        .HasColumnType("int");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Producto");

                    b.HasIndex("CategoriasID_Categoria");

                    b.ToTable("producto");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Sesion", b =>
                {
                    b.Property<Guid>("ID_Sesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraBreak")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraSalida")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraSalidaBreak")
                        .HasColumnType("time");

                    b.Property<int>("HorasTotales")
                        .HasColumnType("int");

                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Sesion");

                    b.ToTable("sesion");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Tienda", b =>
                {
                    b.Property<Guid>("ID_Tienda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdminID_Admin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Admin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Tienda");

                    b.HasIndex("AdminID_Admin");

                    b.ToTable("tienda");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Ventas", b =>
                {
                    b.Property<Guid>("ID_Venta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpleadoID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Hora")
                        .HasColumnType("time");

                    b.Property<Guid>("ID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Monto")
                        .HasColumnType("int");

                    b.HasKey("ID_Venta");

                    b.HasIndex("EmpleadoID_Empleado");

                    b.ToTable("venta");
                });

            modelBuilder.Entity("EmpleadoSesion", b =>
                {
                    b.Property<Guid>("EmpleadosID_Empleado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SesionsID_Sesion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmpleadosID_Empleado", "SesionsID_Sesion");

                    b.HasIndex("SesionsID_Sesion");

                    b.ToTable("EmpleadoSesion");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Caja", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Tienda", "Tienda")
                        .WithMany()
                        .HasForeignKey("TiendaID_Tienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Detalle_Venta", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeSAS.Server.Models.Entities.Ventas", "Ventas")
                        .WithMany("Detalle_Ventas")
                        .HasForeignKey("VentasID_Venta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Empleado", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Tienda", null)
                        .WithMany("Empleados")
                        .HasForeignKey("TiendaID_Tienda");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Inventario", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Tienda", "Tienda")
                        .WithMany()
                        .HasForeignKey("TiendaID_Tienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Menu", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Categorias", "Categorias")
                        .WithMany("Menus")
                        .HasForeignKey("CategoriasID_Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Produccion", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Tienda", "Tienda")
                        .WithMany()
                        .HasForeignKey("TiendaID_Tienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tienda");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Producto", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Categorias", "Categorias")
                        .WithMany()
                        .HasForeignKey("CategoriasID_Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Tienda", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID_Admin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Ventas", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoID_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("EmpleadoSesion", b =>
                {
                    b.HasOne("CafeSAS.Server.Models.Entities.Empleado", null)
                        .WithMany()
                        .HasForeignKey("EmpleadosID_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeSAS.Server.Models.Entities.Sesion", null)
                        .WithMany()
                        .HasForeignKey("SesionsID_Sesion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Categorias", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Empleado", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Tienda", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("CafeSAS.Server.Models.Entities.Ventas", b =>
                {
                    b.Navigation("Detalle_Ventas");
                });
#pragma warning restore 612, 618
        }
    }
}
